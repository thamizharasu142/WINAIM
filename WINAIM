SQL Assessment

Exercise 1: Employee Management System

Database Schema Design

CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL
);

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT,
    hire_date DATE,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);

CREATE TABLE salaries (
    employee_id INT,
    salary DECIMAL(10, 2),
    from_date DATE,
    to_date DATE,
    PRIMARY KEY (employee_id, from_date),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);
```

SQL Queries

1. Find all employees who have been hired in the last year.


SELECT employee_id, first_name, last_name
FROM employees
WHERE hire_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
```

2. Calculate the total salary expenditure for each department.


SELECT d.department_name, SUM(s.salary) AS total_salary_expenditure
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN salaries s ON e.employee_id = s.employee_id
GROUP BY d.department_name;
```

3. Find the top 5 highest-paid employees along with their department names.


SELECT e.employee_id, e.first_name, e.last_name, d.department_name, s.salary
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN salaries s ON e.employee_id = s.employee_id
ORDER BY s.salary DESC
LIMIT 5;
```

Exercise 2: Online Retailer Database

Database Schema Design


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100)
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2)
);

CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
```

SQL Queries

1. Find the total number of orders placed by each customer.


SELECT c.customer_id, c.first_name, c.last_name, COUNT(o.order_id) AS total_orders
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;
```

2. List the products that have never been ordered.


SELECT p.product_id, p.product_name
FROM products p
LEFT JOIN order_items oi ON p.product_id = oi.product_id
WHERE oi.order_item_id IS NULL;
```

3. Find the customer who has spent the most money in the last month.


SELECT c.customer_id, c.first_name, c.last_name, SUM(oi.price * oi.quantity) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 1;
```

Exercise 3: University Course Management

Database Schema Design


CREATE TABLE students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    enrollment_date DATE
);

CREATE TABLE professors (
    professor_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(100)
);

CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100),
    professor_id INT,
    FOREIGN KEY (professor_id) REFERENCES professors(professor_id)
);

CREATE TABLE enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    grade DECIMAL(3, 2),
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);
```

SQL Queries

1. Find the total number of students enrolled in each course.


SELECT c.course_id, c.course_name, COUNT(e.student_id) AS total_students
FROM courses c
JOIN enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id, c.course_name;
```

2. List the courses taught by professors in the 'Computer Science' department.


SELECT c.course_id, c.course_name
FROM courses c
JOIN professors p ON c.professor_id = p.professor_id
WHERE p.department = 'Computer Science';
```

3. Calculate the average grade for each course.


SELECT c.course_id, c.course_name, AVG(e.grade) AS average_grade
FROM courses c
JOIN enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id, c.course_name;
```

4. Find students who are enrolled in more than three courses.

```sql
SELECT s.student_id, s.first_name, s.last_name, COUNT(e.course_id) AS courses_enrolled
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id, s.first_name, s.last_name
HAVING courses_enrolled > 3;
```

Programming Assessment

 Exercise 1: Customer Relationship Management (CRM) System

 Database Schema Design


CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100)
);

CREATE TABLE contacts (
    contact_id INT PRIMARY KEY,
    customer_id INT,
    contact_type VARCHAR(50),  -- e.g., 'phone', 'email', 'meeting'
    contact_date DATE,
    notes TEXT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE opportunities (
    opportunity_id INT PRIMARY KEY,
    customer_id INT,
    opportunity_description TEXT,
    stage VARCHAR(50),  -- e.g., 'initial', 'negotiation', 'closed'
    value DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE interactions (
    interaction_id INT PRIMARY KEY,
    customer_id INT,
    interaction_type VARCHAR(50),  -- e.g., 'call', 'email', 'meeting'
    interaction_date DATE,
    notes TEXT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
```
 API Endpoints (Examples)

1. **Add Customer** (POST /api/customers)
2. **Edit Customer** (PUT /api/customers/{id})
3. Delete Customer (DELETE /api/customers/{id})
4. View Customer (GET /api/customers/{id})
5. Log Interaction (POST /api/interactions)
6. Update Opportunity (PUT /api/opportunities/{id})
7. Dashboard (GET /api/dashboard)

 Exercise 2: Human Resources Management System (HRMS)

 Database Schema Design


CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT,
    role_id INT,
    hire_date DATE,
    FOREIGN KEY (department_id) REFERENCES departments(department_id),
    FOREIGN KEY (role_id) REFERENCES roles(role_id)
);

CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100)
);

CREATE TABLE roles (
    role_id INT PRIMARY KEY,
    role_name VARCHAR(100)
);

CREATE TABLE performance_reviews (
    review_id INT PRIMARY KEY,
    employee_id INT,
    review_date DATE,
    rating DECIMAL(3, 2),
    comments TEXT,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);
```

API Endpoints (Examples)

1. *Add Employee* (POST /api/employees)
2. *Edit Employee* (PUT /api/employees/{id})
3. *Delete Employee*(DELETE /api/employees/{id})
4. *View Employee* (GET /api/employees/{id})
5. *Assign Department*(PUT /api/employees/{id}/department)
6. Conduct Performance Review (POST /api/performance_reviews)
7. *Role-Based Access Control*(handled via middleware and user roles)

 Exercise 3: Inventory Management System

 Database Schema Design


CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2)
);

CREATE TABLE suppliers (
    supplier_id INT PRIMARY KEY,
    supplier_name VARCHAR(100),
    contact_info TEXT
);

CREATE TABLE warehouses (
    warehouse_id INT PRIMARY KEY,
    warehouse_location VARCHAR(100)
);

CREATE TABLE stock_levels (
    product_id INT,
    warehouse_id INT,
    quantity INT,
    PRIMARY KEY (product_id, warehouse_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (warehouse_id) REFERENCES warehouses(warehouse_id)
);
